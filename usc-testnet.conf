blockchain.config.name = "testnet"

# miner options
miner {
    server.enabled = true
    client.enabled = true
    minGasPrice = 0

    # this is a hex-encoded, 20-byte length address where the miner gets the reward
    reward.address = 789e15356d2a561bdda4ceafea62ce5392016e8f
}

peer {

    discovery = {

        # if peer discovery is off
        # the peer window will show
        # only what retrieved by active
        # peer [true/false]
        enabled = false

        # List of the peers to start
        # the search of the online peers
        # values: [ip:port]
        ip.list = [
          #  "192.168.14.245:58585",
          #  "192.168.14.247:58585",
          #  "192.168.14.197:58585",
          #  "192.168.14.253:58585",
        ]
    }

    # Boot node list
    # Use to connect to specific nodes
    active = [
        #{
        #    # Yeou Sunn
        #    ip = 192.168.14.245
        #    port = 58585
        #    nodeId = d461bd5518f0720bfdcb41a520a30a6f6cba03d26e387394cdc6cd2d2859c0731661d673a296aaaa8437d6828c44a165a4ed9b4f10ab17ba429a0c5677971874
        #}
        #{
        #    # Kwuaint
        #    ip = 192.168.14.197
        #    port = 58585
        #    nodeId = 21dee87c7047c1c16b52e228a19c3daf0a59508b6e83a198cb7cf0b4039c0b22e85bb366c4d5bc63e62d5a99302f564637eed87686f203ef44f6849a3f3b0dc9
        #}
        #{
        #    #Justin
        #    ip = 192.168.14.253
        #    port = 58585
        #    nodeId = 38a03397f74ef09a398e6391e3fba97ca93cb54f1fae1f993e39f8a832036b679a1d3d4f5b38ac364e7e59c34eaa896811dcaa20a29cccd2961a87b0783e866b
        #}
        #{
        #    #10 Thousand soldier
        #    ip = 192.168.14.247
        #    port = 58585
        #    nodeId = 910f9c069723acd78ef87b4ed325aae66df407c66c6e815fb1a39f2f60518f8a076a3670914a9dd0722f6df553f42fd187121e7b6ac7adcc85f4305cb98f4428
        #}
    ]

    # list of trusted peers the incoming connections is always accepted from. Even if the max amount of connections is reached
    # This is used to create a filter of Trusted peers
    trusted = [
        # Sample entries:
        # {nodeId = "d461bd5518f0720bfdcb41a520a30a6f6cba03d26e387394cdc6cd2d2859c0731661d673a296aaaa8437d6828c44a165a4ed9b4f10ab17ba429a0c5677971874"},
        # {nodeId = "21dee87c7047c1c16b52e228a19c3daf0a59508b6e83a198cb7cf0b4039c0b22e85bb366c4d5bc63e62d5a99302f564637eed87686f203ef44f6849a3f3b0dc9"},
        # {nodeId = "f90a856ba4222a3bf15dab108d75b2cf046897a10ce195d58a53ca0c1441b309a0f37f65032508b46f58a9a642152f7f15a085c574a7a32c16b0d75f2471430c"},
        # {nodeId = "910f9c069723acd78ef87b4ed325aae66df407c66c6e815fb1a39f2f60518f8a076a3670914a9dd0722f6df553f42fd187121e7b6ac7adcc85f4305cb98f4428"},
        # {ip = "192.168.14.245"},
        # {ip = "11.22.33.*"},

    ]

    # Peer for server to listen for incoming connections
    # 58585 for testnet
    port = 585858

    # connection timeout for trying to connect to a peer [seconds]
    connection.timeout = 2

    # the parameter specifies how much time we will wait for a message to come before closing the channel
    channel.read.timeout = 30

    # Private key of the peer
    # nodeId = 392953c250719af7cb710389a9e0f5bb5c6a627cff6c5242b007e305d15068ca9a14448f0463737910a673a7fd399291e8d08d864c8ba82f88d66a03e386f8ab
    privateKey = 62e1c18ecb25516233f570234ee474a859fe6dd9b3987626674352bde2376388

    # Network id
    networkId = 779

    p2p {
        # max frame size in bytes when framing is enabled
        framing.maxSize = 32768

        # forces peer to send Handshake message in format defined by EIP-8,
        # see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-8.md
        eip8 = true
    }

    # max number of active peers our node will maintain
    # extra peers trying to connect us will be dropeed with TOO_MANY_PEERS message
    # the incoming connection from the peer matching 'peer.trusted' entry is always accepted
    maxActivePeers = 30
}

# Interface to bind peer discovery and wire protocol
# Make sure you are using the correct bind ip. Wildcard value: 0.0.0.0
bind_address = 0.0.0.0

# public IP/hostname which is reported as our host during discovery
# if not set, the service http://checkip.amazonaws.com is used.
# bind_address is the last resort for public ip when it cannot be obtained by other ways
# public.ip = google.com

# the folder resources/genesis contains several versions of genesis configuration according to the network the peer will run on
genesis = ulord-testnet.json

# the number of blocks should pass before pending transaction is removed
transaction.outdated.threshold = 10

# the number of seconds should pass before pending transaction is removed
# (suggested value: 10 blocks * 10 seconds by block = 100 seconds)
transaction.outdated.timeout = 100

database {
    # place to save physical storage files
    dir = database/testnet

    # every time the application starts the existing database will be destroyed and all the data will be downloaded from peers again
    # having this set on true does NOT mean that the block chain will start from the last point
    # [true/false]
    reset = false
}


dump {
    # for testing purposes all the state will be dumped in JSON form to [dump.dir] if [dump.full] = true
    # possible values [true/false]
    full = false

    dir = dmp

    # This defines the vmtrace dump to the console and the style
    # -1 for no block trace
    block = -1

    # styles: [pretty/standard+] (default: standard+)
    style = pretty

    # clean the dump dir each start
    clean.on.restart = true
}

# structured trace is the trace being collected in the form of objects and exposed to the user in json or any other convenient form
vm.structured {
    trace = false
    dir = vmtrace
    compressed = true
    initStorageLimit = 10000
}

# invoke vm program on message received, if the vm is not invoked the balance transfer occurs anyway  [true/false]
play.vm = true

# hello phrase will be included in the hello message of the peer
hello.phrase = TestNet

# Key value data source values: [leveldb]
keyvalue.datasource = leveldb

# the parameter specify when exactly to switch managing storage of the account on autonomous db
details.inmemory.storage.limit = 1

sync {
    # block chain synchronization can be: [true/false]
    enabled = true

    # maximum blocks hashes to ask sending GET_BLOCK_HASHES msg we specify number of block we want to get, recomended value [1..1000]
    # Default: unlimited
    max.hashes.ask = 10000

    # minimal peers count used in sync process sync may use more peers than this value but always trying to get at least this number from discovery
    peer.count = 10
}

rpc {
    enabled = true

    # Interface to bind rpc
    # Make sure you are using the correct bind. Default value: localhost
    bind_address = 192.168.14.246

    port = 44444

    # host = ["localhost", "private.ip", "external.ip", "example.com", "www.example.com"]

    # A value greater than zero sets the socket value in milliseconds. Node attempts to gently close all TCP/IP connections with proper half close semantics,
    # so a linger timeout should not be required and thus the default is -1.
    # linger.time = 0

    cors = "*.usc.co"

    # Enabled RPC Modules. If the module is NOT in the list, and mark as "enabled", the rpc calls will be discard.
    # It is possible to enable/disable a particular method in a module
    # {
    #  name: "evm",
    #  version: "1.0",
    #  enabled: "true",
    #  methods: {
    #   enabled: [ "evm_snapshot", "evm_revert" ],
    #       disabled: [ "evm_reset", "evm_increaseTime" ]
    #  }
    # }
    modules = [
        {
            name: "eth",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "net",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "rpc",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "web3",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "evm",
            version: "1.0",
            enabled: "false"
        },
        {
            name: "sco",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "txpool",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "personal",
            version: "1.0",
            enabled: "true"
        },
        {
            name: "mnr",
            version: "1.0",
            enabled: "true"
        }
    ]
}

# account loaded when the node start.
wallet {
    enabled = true
    accounts = []
}

wire {
    #protocol: "usc"
    protocol: "usc"
}

# solc compiler path
solc.path = /usr/bin/solc

# not good reputation expiration time in seconds
scoring {
    # punishment by node id
    nodes {
        # number of nodes to keep scoring
        number: 100
        # initial punishment duration (in minutes, default = 10 minutes)
        duration: 12
        # punishment duration increment (in percentage, default = 10)
        increment: 10
        # maximum punishment duration (in minutes, default = 0 minutes, no maximum)
        maximum: 0
    }
    # punishment by address
    addresses {
        # initial punishment duration (in minutes, default = 10 minutes)
        duration: 12
        # punishment duration increment (in percentage, default = 10)
        increment: 10
        # maximum punishment duration (in minutes, default = 1 week)
        maximum: 6000
    }
}